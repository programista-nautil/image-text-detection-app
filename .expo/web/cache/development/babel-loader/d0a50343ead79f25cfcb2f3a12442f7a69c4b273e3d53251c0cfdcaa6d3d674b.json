{"ast":null,"code":"import { UnavailabilityError } from 'expo-modules-core';\nimport ExponentSpeech from './ExponentSpeech';\nimport { VoiceQuality } from './Speech.types';\nexport { VoiceQuality };\nconst _CALLBACKS = {};\nlet _nextCallbackId = 1;\nlet _didSetListeners = false;\nfunction _unregisterListenersIfNeeded() {\n  if (Object.keys(_CALLBACKS).length === 0) {\n    removeSpeakingListener('Exponent.speakingStarted');\n    removeSpeakingListener('Exponent.speakingWillSayNextString');\n    removeSpeakingListener('Exponent.speakingDone');\n    removeSpeakingListener('Exponent.speakingStopped');\n    removeSpeakingListener('Exponent.speakingError');\n    _didSetListeners = false;\n  }\n}\nfunction _registerListenersIfNeeded() {\n  if (_didSetListeners) return;\n  _didSetListeners = true;\n  setSpeakingListener('Exponent.speakingStarted', ({\n    id\n  }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStart) {\n      options.onStart();\n    }\n  });\n  setSpeakingListener('Exponent.speakingWillSayNextString', ({\n    id,\n    charIndex,\n    charLength\n  }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onBoundary) {\n      options.onBoundary({\n        charIndex,\n        charLength\n      });\n    }\n  });\n  setSpeakingListener('Exponent.speakingDone', ({\n    id\n  }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onDone) {\n      options.onDone();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingStopped', ({\n    id\n  }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStopped) {\n      options.onStopped();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingError', ({\n    id,\n    error\n  }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onError) {\n      options.onError(new Error(error));\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n}\nexport function speak(text, options = {}) {\n  const id = _nextCallbackId++;\n  _CALLBACKS[id] = options;\n  _registerListenersIfNeeded();\n  ExponentSpeech.speak(String(id), text, options);\n}\nexport async function getAvailableVoicesAsync() {\n  if (!ExponentSpeech.getVoices) {\n    throw new UnavailabilityError('Speech', 'getVoices');\n  }\n  return ExponentSpeech.getVoices();\n}\nexport async function isSpeakingAsync() {\n  return ExponentSpeech.isSpeaking();\n}\nexport async function stop() {\n  return ExponentSpeech.stop();\n}\nexport async function pause() {\n  if (!ExponentSpeech.pause) {\n    throw new UnavailabilityError('Speech', 'pause');\n  }\n  return ExponentSpeech.pause();\n}\nexport async function resume() {\n  if (!ExponentSpeech.resume) {\n    throw new UnavailabilityError('Speech', 'resume');\n  }\n  return ExponentSpeech.resume();\n}\nfunction setSpeakingListener(eventName, callback) {\n  const listenerCount = ExponentSpeech.listenerCount(eventName);\n  if (listenerCount > 0) {\n    ExponentSpeech.removeAllListeners(eventName);\n  }\n  ExponentSpeech.addListener(eventName, callback);\n}\nfunction removeSpeakingListener(eventName) {\n  ExponentSpeech.removeAllListeners(eventName);\n}\nexport const maxSpeechInputLength = ExponentSpeech.maxSpeechInputLength || Number.MAX_VALUE;","map":{"version":3,"names":["UnavailabilityError","ExponentSpeech","VoiceQuality","_CALLBACKS","_nextCallbackId","_didSetListeners","_unregisterListenersIfNeeded","Object","keys","length","removeSpeakingListener","_registerListenersIfNeeded","setSpeakingListener","id","options","onStart","charIndex","charLength","onBoundary","onDone","onStopped","error","onError","Error","speak","text","String","getAvailableVoicesAsync","getVoices","isSpeakingAsync","isSpeaking","stop","pause","resume","eventName","callback","listenerCount","removeAllListeners","addListener","maxSpeechInputLength","Number","MAX_VALUE"],"sources":["C:\\Users\\HP\\Desktop\\Projekty_Bartek\\image-text-detection-app\\node_modules\\expo-speech\\src\\Speech\\Speech.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExponentSpeech from './ExponentSpeech';\nimport { SpeechOptions, SpeechEventCallback, VoiceQuality, Voice, WebVoice } from './Speech.types';\n\nexport { SpeechOptions, SpeechEventCallback, VoiceQuality, Voice, WebVoice };\n\nconst _CALLBACKS = {};\nlet _nextCallbackId = 1;\nlet _didSetListeners = false;\n\nfunction _unregisterListenersIfNeeded() {\n  if (Object.keys(_CALLBACKS).length === 0) {\n    removeSpeakingListener('Exponent.speakingStarted');\n    removeSpeakingListener('Exponent.speakingWillSayNextString');\n    removeSpeakingListener('Exponent.speakingDone');\n    removeSpeakingListener('Exponent.speakingStopped');\n    removeSpeakingListener('Exponent.speakingError');\n    _didSetListeners = false;\n  }\n}\n\nfunction _registerListenersIfNeeded() {\n  if (_didSetListeners) return;\n  _didSetListeners = true;\n  setSpeakingListener('Exponent.speakingStarted', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStart) {\n      options.onStart();\n    }\n  });\n  setSpeakingListener('Exponent.speakingWillSayNextString', ({ id, charIndex, charLength }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onBoundary) {\n      options.onBoundary({\n        charIndex,\n        charLength,\n      });\n    }\n  });\n  setSpeakingListener('Exponent.speakingDone', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onDone) {\n      options.onDone();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingStopped', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStopped) {\n      options.onStopped();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingError', ({ id, error }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onError) {\n      options.onError(new Error(error));\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n}\n\n// @needsAudit\n/**\n * Speak out loud the text given options. Calling this when another text is being spoken adds\n * an utterance to queue.\n * @param text The text to be spoken. Cannot be longer than [`Speech.maxSpeechInputLength`](#speechmaxspeechinputlength).\n * @param options A `SpeechOptions` object.\n */\nexport function speak(text: string, options: SpeechOptions = {}) {\n  const id = _nextCallbackId++;\n  _CALLBACKS[id] = options;\n  _registerListenersIfNeeded();\n  ExponentSpeech.speak(String(id), text, options);\n}\n\n// @needsAudit\n/**\n * Returns list of all available voices.\n * @return List of `Voice` objects.\n */\nexport async function getAvailableVoicesAsync(): Promise<Voice[]> {\n  if (!ExponentSpeech.getVoices) {\n    throw new UnavailabilityError('Speech', 'getVoices');\n  }\n  return ExponentSpeech.getVoices();\n}\n\n//@needsAudit\n/**\n * Determine whether the Text-to-speech utility is currently speaking. Will return `true` if speaker\n * is paused.\n * @return Returns a Promise that fulfils with a boolean, `true` if speaking, `false` if not.\n */\nexport async function isSpeakingAsync(): Promise<boolean> {\n  return ExponentSpeech.isSpeaking();\n}\n\n// @needsAudit\n/**\n * Interrupts current speech and deletes all in queue.\n */\nexport async function stop(): Promise<void> {\n  return ExponentSpeech.stop();\n}\n\n// @needsAudit\n/**\n * Pauses current speech. This method is not available on Android.\n */\nexport async function pause(): Promise<void> {\n  if (!ExponentSpeech.pause) {\n    throw new UnavailabilityError('Speech', 'pause');\n  }\n  return ExponentSpeech.pause();\n}\n\n// @needsAudit\n/**\n * Resumes speaking previously paused speech or does nothing if there's none. This method is not\n * available on Android.\n */\nexport async function resume(): Promise<void> {\n  if (!ExponentSpeech.resume) {\n    throw new UnavailabilityError('Speech', 'resume');\n  }\n\n  return ExponentSpeech.resume();\n}\n\nfunction setSpeakingListener(eventName, callback) {\n  const listenerCount = ExponentSpeech.listenerCount(eventName);\n  if (listenerCount > 0) {\n    ExponentSpeech.removeAllListeners(eventName);\n  }\n  ExponentSpeech.addListener(eventName, callback);\n}\n\nfunction removeSpeakingListener(eventName) {\n  ExponentSpeech.removeAllListeners(eventName);\n}\n\n// @needsAudit\n/**\n * Maximum possible text length acceptable by `Speech.speak()` method. It is platform-dependent.\n * On iOS, this returns `Number.MAX_VALUE`.\n */\nexport const maxSpeechInputLength: number = ExponentSpeech.maxSpeechInputLength || Number.MAX_VALUE;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}